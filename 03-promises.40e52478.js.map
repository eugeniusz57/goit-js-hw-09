{"mappings":"iiBAAO,IAAMA,EAAM,CACfC,UAAWC,SAASC,cAAc,UAClCC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,wBACpCI,KAAML,SAASC,cAAc,U,aCDjCH,EAAKO,KAAKC,iBAAiB,SAK3B,SAAuBC,GACvBC,EAAKD,EAAEE,OAAOC,MAAQH,EAAEE,OAAOE,SAL/Bb,EAAKO,KAAKC,iBAAiB,UAQ3B,SAAkBC,G,oBAUhBK,YAAW,YAOb,SAAuBC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACLC,KAAKC,SAAW,GAEpCC,EAAAC,GAASC,OAAOC,QAAQ,uBAAwCC,OAAfX,EAAS,QAAYW,OAANV,EAAM,OAEtEM,EAAAC,GAASC,OAAOG,QAAQ,sBAAqCD,OAAfX,EAAS,QAAYW,OAANV,EAAM,WAZrEY,CAAcC,EAAGC,GAAOC,MAAK,SAAAC,G,OAAUC,QAAQC,IAAIF,MAASG,OAAM,SAAAC,G,OAASH,QAAQC,IAAIE,QACtFN,IAXHrB,EAAE4B,iBAEF,IAAMC,EAASC,OAAO7B,EAAK4B,QACfC,OAAO7B,EAAKM,OAExB,GAAGuB,OAAO7B,EAAKM,OAAS,GAAKuB,OAAO7B,EAAK8B,MAAQ,GAAKD,OAAO7B,EAAK4B,QAAU,EAE1E,YADAhB,EAAAC,GAASC,OAAOG,QAAS,+CAEzB,IAAK,IAAIc,EAAI,EAAGC,EAASH,OAAO7B,EAAKM,OAAQyB,GAAKH,EAASG,GAAG,EAAGC,GAASH,OAAO7B,EAAK8B,MAAKG,EAAAF,EAAAC,MAf/F,IAAMhC,EAAO,G","sources":["src/js/03-refs.js","src/js/03-promises.js"],"sourcesContent":["export const refs ={\n    btnCreate: document.querySelector('button'),\n    inputDelay: document.querySelector('input[name=\"delay\"]'),\n    inputStep: document.querySelector('input[name=\"step\"]'),\n    inputAmount: document.querySelector('input[name=\"amount\"]'),\n    form: document.querySelector('.form')\n  }","import {refs} from './03-refs';\n\nimport Notiflix from 'notiflix';\n\nrefs.form.addEventListener('input',  onInputObject,);\nrefs.form.addEventListener('submit', onSubmit);\n\nconst Date = {};\n\nfunction onInputObject(e){\nDate[e.target.name] = e.target.value;\n}\n\nfunction onSubmit(e){\n  e.preventDefault();\n\n  const amount = Number(Date.amount);\n  let delay = Number(Date.delay);\n\n  if(Number(Date.delay) < 0 || Number(Date.step) < 0 || Number(Date.amount) < 0){\n    Notiflix.Notify.failure(`❌ The value in the field cannot be negative`);\n    return;\n  } for (let i = 1, delay =  Number(Date.delay); i <= amount;  i+=1, delay += Number(Date.step) ){\n  setTimeout(() => {\n    createPromise(i, delay).then(result => console.log(result)).catch(error => console.log(error))\n  }, delay);\n}\n  \n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    } else {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    }\n  })\n \n}"],"names":["$585d6f4f34b628cd$export$21666b427502ea6d","btnCreate","document","querySelector","inputDelay","inputStep","inputAmount","form","addEventListener","e","$ce04d3a99e08e73b$var$Date","target","name","value","setTimeout","position","delay","Promise","resolve","reject","Math","random","$parcel$interopDefault","$iU1Pc","Notify","success","concat","failure","$ce04d3a99e08e73b$var$createPromise","i","delay1","then","result","console","log","catch","error","preventDefault","amount","Number","step","i1","delay11","_loop"],"version":3,"file":"03-promises.40e52478.js.map"}
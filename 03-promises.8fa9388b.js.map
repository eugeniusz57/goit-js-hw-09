{"mappings":"qhBAAO,MAAMA,EAAM,CACfC,UAAWC,SAASC,cAAc,UAClCC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,wBACpCI,KAAML,SAASC,cAAc,U,iBCDjCH,EAAKO,KAAKC,iBAAiB,SAK3B,SAAuBC,GACvBC,EAAKD,EAAEE,OAAOC,MAAQH,EAAEE,OAAOE,SAL/Bb,EAAKO,KAAKC,iBAAiB,UAQ3B,SAAkBC,GAChBA,EAAEK,iBAEF,MAAMC,EAASC,OAAON,EAAKK,QACfC,OAAON,EAAKO,OAExB,GAAGD,OAAON,EAAKO,OAAS,GAAKD,OAAON,EAAKQ,MAAQ,GAAKF,OAAON,EAAKK,QAAU,EAExE,YADFI,EAAAC,GAASC,OAAOC,QAAQ,+CAExB,IAAK,IAAIC,EAAI,EAAGC,EAASR,OAAON,EAAKO,OAAQM,GAAKR,EAASQ,GAAG,EAAGC,GAASR,OAAON,EAAKQ,MACxFO,YAAW,KACTC,EAAcH,EAAGC,GAAOG,MAAKC,GAAUC,QAAQC,IAAIF,KAASG,OAAMC,GAASH,QAAQC,IAAIE,OACtFR,MAlBL,MAAMd,EAAO,GAuBb,SAASgB,EAAcO,EAAUhB,GAC/B,OAAO,IAAIiB,SAAQ,CAACC,EAASC,KACLC,KAAKC,SAAW,GAEpCnB,EAAAC,GAASC,OAAOkB,QAAQ,uBAAqBN,QAAiBhB,OAE9DE,EAAAC,GAASC,OAAOC,QAAQ,sBAAoBW,QAAehB","sources":["src/js/03-refs.js","src/js/03-promises.js"],"sourcesContent":["export const refs ={\n    btnCreate: document.querySelector('button'),\n    inputDelay: document.querySelector('input[name=\"delay\"]'),\n    inputStep: document.querySelector('input[name=\"step\"]'),\n    inputAmount: document.querySelector('input[name=\"amount\"]'),\n    form: document.querySelector('.form')\n  }","import {refs} from './03-refs';\n\nimport Notiflix from 'notiflix';\n\nrefs.form.addEventListener('input',  onInputObject,);\nrefs.form.addEventListener('submit', onSubmit);\n\nconst Date = {};\n\nfunction onInputObject(e){\nDate[e.target.name] = e.target.value;\n}\n\nfunction onSubmit(e){\n  e.preventDefault();\n\n  const amount = Number(Date.amount);\n  let delay = Number(Date.delay);\n\n  if(Number(Date.delay) < 0 || Number(Date.step) < 0 || Number(Date.amount) < 0){\n    Notiflix.Notify.failure(`❌ The value in the field cannot be negative`);\n    return;\n  } for (let i = 1, delay =  Number(Date.delay); i <= amount;  i+=1, delay += Number(Date.step) ){\n  setTimeout(() => {\n    createPromise(i, delay).then(result => console.log(result)).catch(error => console.log(error))\n  }, delay);\n}\n  \n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    } else {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n    }\n  })\n \n}"],"names":["$844d2d644ec7a785$export$21666b427502ea6d","btnCreate","document","querySelector","inputDelay","inputStep","inputAmount","form","addEventListener","e","$47d4ff9957288465$var$Date","target","name","value","preventDefault","amount","Number","delay","step","$parcel$interopDefault","$eWCmQ","Notify","failure","i","delay1","setTimeout","$47d4ff9957288465$var$createPromise","then","result","console","log","catch","error","position","Promise","resolve","reject","Math","random","success"],"version":3,"file":"03-promises.8fa9388b.js.map"}